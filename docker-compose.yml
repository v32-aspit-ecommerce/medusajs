version: "3.8"
# start command: "docker compose build && docker compose up -d"
services:
  medusajs:
    build:
      dockerfile: Dockerfile
      context: .
    container_name: medusajs_backend
    restart: always

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

    environment:
      REDIS_URL: ${REDIS_URL}
      NODE_ENV: development
      PORT: ${PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    
    networks:
      - medusajs_external
      - medusajs_internal
    env_file:
      - .env
    ports:
      - "9000:${PORT}"
    volumes: 
      - medusa_data:/app/MEDUSAJS
      - node_modules:/app/MEDUSAJS/node_modules
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:${PORT}/app || exit 1
      interval: 60s
      timeout: 10s
      start_period: 20s
      retries: 5

  postgres:
    image: postgres:16.2-alpine
    restart: always
    expose:
      - 5432
    networks:
      - medusajs_internal
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

    volumes:
      - db:/var/lib/postgresql/data

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2.4-alpine
    restart: always
    container_name: redis
    expose:
      - 6379
    networks:
      - medusajs_internal
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}

    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis:/data

volumes:
  medusa_data:
  node_modules:
  db:
    driver: local
  redis:
    driver: local
  
networks:
  medusajs_external:
    name: medusajs_external
    external: true

  medusajs_internal:
    name: medusajs_internal
    driver: bridge